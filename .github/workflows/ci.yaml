name: CI and CD for Frontend Code

on:
  push:
    branches:
      - dev
  pull_request:
    paths:
      - 'frontend/**'
    branches:
      - dev
permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Check Conventional Commits
      - name: Validate commit message
        run: chmod +x .github/scripts/check_commit.sh && .github/scripts/check_commit.sh
      # Install dependencies and cache it
      - name: setup-node
        uses:  actions/setup-node@v4
        with:
          node_version: 18
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

# Release step
  create_semantic_version:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup-node
        uses: actions/setup-node@v4

        with:
          node_version: 18
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Semantic release
        env:
          GITHUB_TOKEN: ${{secrets.GH_PAT}}
        run: npx semantic-release


      - name: Create version Tag
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION="0.0.0"
          fi

          NEW_BRANCH="v/${VERSION#v}"
          git config user.name 'action-user[bot]'
          git config user.email 'action-user[bot]@github.com'

          git checkout -b "$NEW_BRANCH"
          git push origin "$NEW_BRANCH"




  build_and_push_docker_image:
    needs: create_semantic_version
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get latest version from tag
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          VERSION_NUMBER=${VERSION#v}
          echo "version=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-app:v${{ steps.version.outputs.version }}
            ${{secrets.DOCKER_HUB_USERNAME}}/frontend-app:latest
