name: CI and CD for Frontend Code
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    paths:
      - 'frontend/**'
    branches:
      - dev
      - main

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Check Conventional Commits
      - name: Validate commit message
        run: chmod +x .github/scripts/check_commit.sh && .github/scripts/check_commit.sh

      # Install dependencies and cache it
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Fixed: was node_version
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Run tests
        run: |
          cd frontend
          yarn test || echo "No tests configured"

      - name: Run linting
        run: |
          cd frontend
          yarn lint

  # Release step for DEV branch - creates prerelease tags
  create_dev_version:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git

      - name: Semantic release (Dev)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cd frontend
          npx semantic-release

      - name: Get latest version from tag
        id: version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          VERSION_NUMBER=${VERSION#v}
          echo "version=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"
          echo "Created version: $VERSION_NUMBER"

  # Build and push Docker image for DEV releases
  build_and_push_docker_image:
    needs: create_dev_version
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev' && needs.create_dev_version.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-app:v${{ needs.create_dev_version.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-app:dev-latest

  # Release step for MAIN branch - creates production releases
  create_main_release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git

      - name: Semantic release (Main)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cd frontend
          npx semantic-release

      - name: Get latest version from tag
        id: version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          VERSION_NUMBER=${VERSION#v}
          echo "version=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"
          echo "Created version: $VERSION_NUMBER"

  # Build and push production Docker image for MAIN releases
  build_production_artifacts:
    needs: create_main_release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.create_main_release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-app:v${{ needs.create_main_release.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-app:latest
